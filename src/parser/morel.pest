// Licensed to Julian Hyde under one or more contributor license
// agreements.  See the NOTICE file distributed with this work
// for additional information regarding copyright ownership.
// Julian Hyde licenses this file to you under the Apache
// License, Version 2.0 (the "License"); you may not use this
// file except in compliance with the License.  You may obtain a
// copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied.  See the License for the specific
// language governing permissions and limitations under the
// License.
WHITESPACE = _{ " " }
keywords = { "val" | "if" }
statement = { expr | decl }

expr = { identifier | literal }

identifier = { unquoted_identifier | quoted_identifier }
unquoted_identifier = @{ !keywords ~ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
quoted_identifier = { "`" ~ (identifier_char | identifier_escape)* ~ "`" }
identifier_char = { !"`" ~ ANY }
identifier_escape = { "`" ~ "`" }

/// A literal is a number, string, or character.
/// E.g. `42`, `~3.5`, `6.02e~23`, `"hello"`, or `#"c"`.
literal = { numeric_literal | string_literal | char_literal }

numeric_literal = {
  scientific_literal
| real_literal
| non_negative_integer_literal
| negative_integer_literal
}
non_negative_integer_literal = { ASCII_DIGIT+ }
negative_integer_literal = { "~" ~ non_negative_integer_literal }
real_literal = { "~"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
scientific_literal = {
  "~"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ ("e" | "E") ~ "~"? ~ ASCII_DIGIT+
}

string_literal = { "\"" ~ (string_char | escape)* ~ "\"" }
string_char = { !("\\" | "\"") ~ ANY }
escape = { "\\" ~ "\\" | "\\" ~ "\""}

char_literal = { "#" ~ "\"" ~ (string_char | escape) ~ "\"" }

/// A declaration declares a value or a type.
decl = { val_decl | type_decl }
val_decl = { "val" ~ pat ~ (":" ~ type_decl)? ~ ("=" ~ expr)? }
type_decl = { "int" | "real" | "string" | "char" | "bool" }

/// A pattern can be an identifier or a tuple.
pat = { identifier }

// End morel.pest
